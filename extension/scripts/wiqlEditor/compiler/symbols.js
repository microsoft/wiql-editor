var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Symbol = /** @class */ (function () {
    function Symbol() {
    }
    return Symbol;
}());
export { Symbol };
/** symbols generated by the lexer */
var Token = /** @class */ (function (_super) {
    __extends(Token, _super);
    // include line and column numbers for better debugging.
    function Token(line, startColumn, text) {
        var _this = _super.call(this) || this;
        _this.line = line;
        _this.startColumn = startColumn;
        _this.text = text;
        _this.endColumn = text.length + startColumn;
        return _this;
    }
    return Token;
}(Symbol));
export { Token };
// Keywords
var Select = /** @class */ (function (_super) {
    __extends(Select, _super);
    function Select() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Select;
}(Token));
export { Select };
var From = /** @class */ (function (_super) {
    __extends(From, _super);
    function From() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return From;
}(Token));
export { From };
var Where = /** @class */ (function (_super) {
    __extends(Where, _super);
    function Where() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Where;
}(Token));
export { Where };
var OrderBy = /** @class */ (function (_super) {
    __extends(OrderBy, _super);
    function OrderBy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return OrderBy;
}(Token));
export { OrderBy };
var Asc = /** @class */ (function (_super) {
    __extends(Asc, _super);
    function Asc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Asc;
}(Token));
export { Asc };
var Desc = /** @class */ (function (_super) {
    __extends(Desc, _super);
    function Desc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Desc;
}(Token));
export { Desc };
var Asof = /** @class */ (function (_super) {
    __extends(Asof, _super);
    function Asof() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Asof;
}(Token));
export { Asof };
var Not = /** @class */ (function (_super) {
    __extends(Not, _super);
    function Not() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Not;
}(Token));
export { Not };
var Ever = /** @class */ (function (_super) {
    __extends(Ever, _super);
    function Ever() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Ever;
}(Token));
export { Ever };
var In = /** @class */ (function (_super) {
    __extends(In, _super);
    function In() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return In;
}(Token));
export { In };
var Like = /** @class */ (function (_super) {
    __extends(Like, _super);
    function Like() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Like;
}(Token));
export { Like };
var Under = /** @class */ (function (_super) {
    __extends(Under, _super);
    function Under() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Under;
}(Token));
export { Under };
var WorkItems = /** @class */ (function (_super) {
    __extends(WorkItems, _super);
    function WorkItems() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return WorkItems;
}(Token));
export { WorkItems };
var WorkItemLinks = /** @class */ (function (_super) {
    __extends(WorkItemLinks, _super);
    function WorkItemLinks() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return WorkItemLinks;
}(Token));
export { WorkItemLinks };
var And = /** @class */ (function (_super) {
    __extends(And, _super);
    function And() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return And;
}(Token));
export { And };
var Or = /** @class */ (function (_super) {
    __extends(Or, _super);
    function Or() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Or;
}(Token));
export { Or };
var Contains = /** @class */ (function (_super) {
    __extends(Contains, _super);
    function Contains() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Contains;
}(Token));
export { Contains };
var Words = /** @class */ (function (_super) {
    __extends(Words, _super);
    function Words() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Words;
}(Token));
export { Words };
var Group = /** @class */ (function (_super) {
    __extends(Group, _super);
    function Group() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Group;
}(Token));
export { Group };
var True = /** @class */ (function (_super) {
    __extends(True, _super);
    function True() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return True;
}(Token));
export { True };
var False = /** @class */ (function (_super) {
    __extends(False, _super);
    function False() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return False;
}(Token));
export { False };
// Operators
var RParen = /** @class */ (function (_super) {
    __extends(RParen, _super);
    function RParen() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return RParen;
}(Token));
export { RParen };
var LParen = /** @class */ (function (_super) {
    __extends(LParen, _super);
    function LParen() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return LParen;
}(Token));
export { LParen };
var RSqBracket = /** @class */ (function (_super) {
    __extends(RSqBracket, _super);
    function RSqBracket() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return RSqBracket;
}(Token));
export { RSqBracket };
var LSqBracket = /** @class */ (function (_super) {
    __extends(LSqBracket, _super);
    function LSqBracket() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return LSqBracket;
}(Token));
export { LSqBracket };
var Comma = /** @class */ (function (_super) {
    __extends(Comma, _super);
    function Comma() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Comma;
}(Token));
export { Comma };
var Equals = /** @class */ (function (_super) {
    __extends(Equals, _super);
    function Equals() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Equals;
}(Token));
export { Equals };
var NotEquals = /** @class */ (function (_super) {
    __extends(NotEquals, _super);
    function NotEquals() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NotEquals;
}(Token));
export { NotEquals };
var GreaterThan = /** @class */ (function (_super) {
    __extends(GreaterThan, _super);
    function GreaterThan() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return GreaterThan;
}(Token));
export { GreaterThan };
var LessThan = /** @class */ (function (_super) {
    __extends(LessThan, _super);
    function LessThan() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return LessThan;
}(Token));
export { LessThan };
var GreaterOrEq = /** @class */ (function (_super) {
    __extends(GreaterOrEq, _super);
    function GreaterOrEq() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return GreaterOrEq;
}(Token));
export { GreaterOrEq };
var LessOrEq = /** @class */ (function (_super) {
    __extends(LessOrEq, _super);
    function LessOrEq() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return LessOrEq;
}(Token));
export { LessOrEq };
var Minus = /** @class */ (function (_super) {
    __extends(Minus, _super);
    function Minus() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Minus;
}(Token));
export { Minus };
var Plus = /** @class */ (function (_super) {
    __extends(Plus, _super);
    function Plus() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Plus;
}(Token));
export { Plus };
var UnexpectedToken = /** @class */ (function (_super) {
    __extends(UnexpectedToken, _super);
    function UnexpectedToken() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return UnexpectedToken;
}(Token));
export { UnexpectedToken };
var String = /** @class */ (function (_super) {
    __extends(String, _super);
    function String() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return String;
}(Token));
export { String };
var NonterminatingString = /** @class */ (function (_super) {
    __extends(NonterminatingString, _super);
    function NonterminatingString() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NonterminatingString;
}(Token));
export { NonterminatingString };
var Identifier = /** @class */ (function (_super) {
    __extends(Identifier, _super);
    function Identifier() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Identifier;
}(Token));
export { Identifier };
var Digits = /** @class */ (function (_super) {
    __extends(Digits, _super);
    function Digits() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Digits;
}(Token));
export { Digits };
var Variable = /** @class */ (function (_super) {
    __extends(Variable, _super);
    function Variable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Variable;
}(Token));
export { Variable };
var IsEmpty = /** @class */ (function (_super) {
    __extends(IsEmpty, _super);
    function IsEmpty() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return IsEmpty;
}(Token));
export { IsEmpty };
var IsNotEmpty = /** @class */ (function (_super) {
    __extends(IsNotEmpty, _super);
    function IsNotEmpty() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return IsNotEmpty;
}(Token));
export { IsNotEmpty };
var Mode = /** @class */ (function (_super) {
    __extends(Mode, _super);
    function Mode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Mode;
}(Token));
export { Mode };
var MustContain = /** @class */ (function (_super) {
    __extends(MustContain, _super);
    function MustContain() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MustContain;
}(Token));
export { MustContain };
var MayContain = /** @class */ (function (_super) {
    __extends(MayContain, _super);
    function MayContain() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MayContain;
}(Token));
export { MayContain };
var DoesNotContain = /** @class */ (function (_super) {
    __extends(DoesNotContain, _super);
    function DoesNotContain() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DoesNotContain;
}(Token));
export { DoesNotContain };
var Source = /** @class */ (function (_super) {
    __extends(Source, _super);
    function Source() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Source;
}(Token));
export { Source };
var Target = /** @class */ (function (_super) {
    __extends(Target, _super);
    function Target() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Target;
}(Token));
export { Target };
var Dot = /** @class */ (function (_super) {
    __extends(Dot, _super);
    function Dot() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Dot;
}(Token));
export { Dot };
var Recursive = /** @class */ (function (_super) {
    __extends(Recursive, _super);
    function Recursive() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Recursive;
}(Token));
export { Recursive };
var ReturnMatchingChildren = /** @class */ (function (_super) {
    __extends(ReturnMatchingChildren, _super);
    function ReturnMatchingChildren() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ReturnMatchingChildren;
}(Token));
export { ReturnMatchingChildren };
var EOF = /** @class */ (function (_super) {
    __extends(EOF, _super);
    function EOF(line, startColumn, prev) {
        var _this = _super.call(this, line, startColumn, "") || this;
        _this.prev = prev;
        return _this;
    }
    return EOF;
}(Token));
export { EOF };
var SymbolTree = /** @class */ (function (_super) {
    __extends(SymbolTree, _super);
    function SymbolTree(inputs) {
        var _this = _super.call(this) || this;
        _this.inputs = inputs;
        return _this;
    }
    /**
     * Error checkers work better if each tree symbol has its component types as properties
     * so we want to create properties with the relevant data for each SymbolTree
     * and autowire it by tye type of type of the property
     *
     * However typescript does not type reflection that can handle union types during refelction
     * so we have to manually wire the properties of each symbol tree in each constructor.
     */
    SymbolTree.prototype.getInput = function (types, occurance) {
        if (occurance === void 0) { occurance = 1; }
        var count = 0;
        if (types instanceof Function) {
            types = [types];
        }
        for (var _i = 0, _a = this.inputs; _i < _a.length; _i++) {
            var input = _a[_i];
            for (var _b = 0, types_1 = types; _b < types_1.length; _b++) {
                var type = types_1[_b];
                if (input instanceof type && ++count === occurance) {
                    return input;
                }
            }
        }
        return null;
    };
    return SymbolTree;
}(Symbol));
export { SymbolTree };
var Number = /** @class */ (function (_super) {
    __extends(Number, _super);
    function Number(inputs) {
        var _this = _super.call(this, inputs) || this;
        _this.digits = _super.prototype.getInput.call(_this, Digits);
        _this.minus = _super.prototype.getInput.call(_this, Minus);
        return _this;
    }
    return Number;
}(SymbolTree));
export { Number };
var Field = /** @class */ (function (_super) {
    __extends(Field, _super);
    function Field(inputs) {
        var _this = _super.call(this, inputs) || this;
        _this.identifier = _super.prototype.getInput.call(_this, Identifier);
        return _this;
    }
    return Field;
}(SymbolTree));
export { Field };
var ContainsWords = /** @class */ (function (_super) {
    __extends(ContainsWords, _super);
    function ContainsWords(inputs) {
        var _this = _super.call(this, inputs) || this;
        _this.contains = _super.prototype.getInput.call(_this, Contains);
        _this.words = _super.prototype.getInput.call(_this, Words);
        return _this;
    }
    return ContainsWords;
}(SymbolTree));
export { ContainsWords };
var InGroup = /** @class */ (function (_super) {
    __extends(InGroup, _super);
    function InGroup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return InGroup;
}(SymbolTree));
export { InGroup };
var DateTime = /** @class */ (function (_super) {
    __extends(DateTime, _super);
    function DateTime(inputs) {
        var _this = _super.call(this, inputs) || this;
        _this.dateString = _super.prototype.getInput.call(_this, String);
        return _this;
    }
    return DateTime;
}(SymbolTree));
export { DateTime };
var OrderByFieldList = /** @class */ (function (_super) {
    __extends(OrderByFieldList, _super);
    function OrderByFieldList(inputs) {
        var _this = _super.call(this, inputs) || this;
        _this.field = _super.prototype.getInput.call(_this, Field);
        _this.ascDesc = _super.prototype.getInput.call(_this, [Asc, Desc]);
        _this.restOfList = _super.prototype.getInput.call(_this, OrderByFieldList);
        return _this;
    }
    return OrderByFieldList;
}(SymbolTree));
export { OrderByFieldList };
var FieldList = /** @class */ (function (_super) {
    __extends(FieldList, _super);
    function FieldList(inputs) {
        var _this = _super.call(this, inputs) || this;
        _this.field = _super.prototype.getInput.call(_this, Field);
        _this.restOfList = _super.prototype.getInput.call(_this, FieldList);
        return _this;
    }
    return FieldList;
}(SymbolTree));
export { FieldList };
var ConditionalOperator = /** @class */ (function (_super) {
    __extends(ConditionalOperator, _super);
    function ConditionalOperator(inputs) {
        var _this = _super.call(this, inputs) || this;
        _this.conditionToken = _super.prototype.getInput.call(_this, [Equals, NotEquals, GreaterThan, GreaterOrEq, LessThan, LessOrEq, Contains, ContainsWords, Like, Under, InGroup, Ever]);
        _this.ever = _super.prototype.getInput.call(_this, [Ever]);
        _this.not = _super.prototype.getInput.call(_this, [Not]);
        return _this;
    }
    return ConditionalOperator;
}(SymbolTree));
export { ConditionalOperator };
var VariableArguments = /** @class */ (function (_super) {
    __extends(VariableArguments, _super);
    function VariableArguments(inputs) {
        var _this = _super.call(this, inputs) || this;
        _this.value = _super.prototype.getInput.call(_this, [Number, String, True, False]);
        _this.args = _super.prototype.getInput.call(_this, VariableArguments);
        return _this;
    }
    return VariableArguments;
}(SymbolTree));
export { VariableArguments };
var VariableExpression = /** @class */ (function (_super) {
    __extends(VariableExpression, _super);
    function VariableExpression(inputs) {
        var _this = _super.call(this, inputs) || this;
        _this.name = _super.prototype.getInput.call(_this, Variable);
        _this.args = _super.prototype.getInput.call(_this, VariableArguments);
        _this.operator = _super.prototype.getInput.call(_this, [Plus, Minus]);
        _this.num = _super.prototype.getInput.call(_this, Number);
        return _this;
    }
    return VariableExpression;
}(SymbolTree));
export { VariableExpression };
var Value = /** @class */ (function (_super) {
    __extends(Value, _super);
    function Value(inputs) {
        var _this = _super.call(this, inputs) || this;
        _this.value = _super.prototype.getInput.call(_this, [Number, String, DateTime, VariableExpression, True, False, Field]);
        return _this;
    }
    return Value;
}(SymbolTree));
export { Value };
var ValueList = /** @class */ (function (_super) {
    __extends(ValueList, _super);
    function ValueList(inputs) {
        var _this = _super.call(this, inputs) || this;
        _this.value = _super.prototype.getInput.call(_this, Value);
        _this.restOfList = _super.prototype.getInput.call(_this, ValueList);
        return _this;
    }
    return ValueList;
}(SymbolTree));
export { ValueList };
/** Combines the expression[1 - 4] from ebnf into one */
var LogicalExpression = /** @class */ (function (_super) {
    __extends(LogicalExpression, _super);
    function LogicalExpression(inputs) {
        var _this = _super.call(this, inputs) || this;
        _this.condition = _super.prototype.getInput.call(_this, [ConditionalExpression]);
        _this.everNot = _super.prototype.getInput.call(_this, [Ever, Not]);
        _this.orAnd = _super.prototype.getInput.call(_this, [And, Or]);
        _this.expression = _super.prototype.getInput.call(_this, LogicalExpression);
        return _this;
    }
    return LogicalExpression;
}(SymbolTree));
export { LogicalExpression };
var ConditionalExpression = /** @class */ (function (_super) {
    __extends(ConditionalExpression, _super);
    function ConditionalExpression(inputs) {
        var _this = _super.call(this, inputs) || this;
        _this.expression = _super.prototype.getInput.call(_this, LogicalExpression);
        _this.field = _super.prototype.getInput.call(_this, Field);
        _this.conditionalOperator = _super.prototype.getInput.call(_this, [ConditionalOperator, IsEmpty, IsNotEmpty]);
        _this.inOperator = _super.prototype.getInput.call(_this, In);
        _this.value = _super.prototype.getInput.call(_this, Value);
        _this.not = _super.prototype.getInput.call(_this, Not);
        _this.valueList = _super.prototype.getInput.call(_this, ValueList);
        return _this;
    }
    return ConditionalExpression;
}(SymbolTree));
export { ConditionalExpression };
var FlatSelect = /** @class */ (function (_super) {
    __extends(FlatSelect, _super);
    function FlatSelect(inputs) {
        var _this = _super.call(this, inputs) || this;
        _this.fieldList = _super.prototype.getInput.call(_this, FieldList);
        _this.whereExp = _super.prototype.getInput.call(_this, LogicalExpression);
        _this.orderBy = _super.prototype.getInput.call(_this, OrderByFieldList);
        _this.asOf = _super.prototype.getInput.call(_this, DateTime);
        return _this;
    }
    return FlatSelect;
}(SymbolTree));
export { FlatSelect };
var SourcePrefix = /** @class */ (function (_super) {
    __extends(SourcePrefix, _super);
    function SourcePrefix(inputs) {
        var _this = _super.call(this, inputs) || this;
        _this.source = _super.prototype.getInput.call(_this, Source);
        return _this;
    }
    return SourcePrefix;
}(SymbolTree));
export { SourcePrefix };
var TargetPrefix = /** @class */ (function (_super) {
    __extends(TargetPrefix, _super);
    function TargetPrefix(inputs) {
        var _this = _super.call(this, inputs) || this;
        _this.target = _super.prototype.getInput.call(_this, Target);
        return _this;
    }
    return TargetPrefix;
}(SymbolTree));
export { TargetPrefix };
var LinkCondition = /** @class */ (function (_super) {
    __extends(LinkCondition, _super);
    function LinkCondition(inputs) {
        var _this = _super.call(this, inputs) || this;
        _this.expression = _super.prototype.getInput.call(_this, LinkExpression);
        _this.prefix = _super.prototype.getInput.call(_this, [SourcePrefix, TargetPrefix]);
        _this.field = _super.prototype.getInput.call(_this, Field);
        _this.conditionalOperator = _super.prototype.getInput.call(_this, [ConditionalOperator, IsEmpty, IsNotEmpty]);
        _this.inOperator = _super.prototype.getInput.call(_this, In);
        _this.value = _super.prototype.getInput.call(_this, Value);
        _this.not = _super.prototype.getInput.call(_this, Not);
        _this.valueList = _super.prototype.getInput.call(_this, ValueList);
        return _this;
    }
    return LinkCondition;
}(SymbolTree));
export { LinkCondition };
var LinkExpression = /** @class */ (function (_super) {
    __extends(LinkExpression, _super);
    function LinkExpression(inputs) {
        var _this = _super.call(this, inputs) || this;
        _this.condition = _super.prototype.getInput.call(_this, [LinkCondition]);
        _this.everNot = _super.prototype.getInput.call(_this, [Ever, Not]);
        _this.orAnd = _super.prototype.getInput.call(_this, [And, Or]);
        _this.expression = _super.prototype.getInput.call(_this, LinkExpression);
        return _this;
    }
    return LinkExpression;
}(SymbolTree));
export { LinkExpression };
var LinkOrderByFieldList = /** @class */ (function (_super) {
    __extends(LinkOrderByFieldList, _super);
    function LinkOrderByFieldList(inputs) {
        var _this = _super.call(this, inputs) || this;
        _this.prefix = _super.prototype.getInput.call(_this, [SourcePrefix, TargetPrefix]);
        _this.field = _super.prototype.getInput.call(_this, Field);
        _this.ascDesc = _super.prototype.getInput.call(_this, [Asc, Desc]);
        _this.restOfList = _super.prototype.getInput.call(_this, [LinkOrderByFieldList]);
        return _this;
    }
    return LinkOrderByFieldList;
}(SymbolTree));
export { LinkOrderByFieldList };
var OneHopSelect = /** @class */ (function (_super) {
    __extends(OneHopSelect, _super);
    function OneHopSelect(inputs) {
        var _this = _super.call(this, inputs) || this;
        _this.fieldList = _super.prototype.getInput.call(_this, FieldList);
        _this.whereExp = _super.prototype.getInput.call(_this, LinkExpression);
        _this.orderBy = _super.prototype.getInput.call(_this, LinkOrderByFieldList);
        _this.asOf = _super.prototype.getInput.call(_this, DateTime);
        _this.mode = _super.prototype.getInput.call(_this, [MustContain, MayContain, DoesNotContain]);
        return _this;
    }
    return OneHopSelect;
}(SymbolTree));
export { OneHopSelect };
var RecursiveSelect = /** @class */ (function (_super) {
    __extends(RecursiveSelect, _super);
    function RecursiveSelect(inputs) {
        var _this = _super.call(this, inputs) || this;
        _this.fieldList = _super.prototype.getInput.call(_this, FieldList);
        _this.whereExp = _super.prototype.getInput.call(_this, LinkExpression);
        _this.orderBy = _super.prototype.getInput.call(_this, LinkOrderByFieldList);
        _this.asOf = _super.prototype.getInput.call(_this, DateTime);
        _this.recursive = _super.prototype.getInput.call(_this, Recursive);
        _this.matchingChildren = _super.prototype.getInput.call(_this, ReturnMatchingChildren);
        return _this;
    }
    return RecursiveSelect;
}(SymbolTree));
export { RecursiveSelect };
// Link symbols not copied as workItemLink queries are not supported yet
export function getSymbolName(symbolClass) {
    var str = symbolClass.toString();
    var match = str.match(/function (\S+)(?=\()/);
    if (match) {
        return match[1];
    }
    throw new Error("type is not a function");
}
export function isTokenClass(symbolClass) {
    return symbolClass.prototype.__proto__.constructor === Token;
}
//# sourceMappingURL=symbols.js.map